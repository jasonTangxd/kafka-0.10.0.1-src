############################# 基本配置 #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=0

# 可以删除topic
delete.topic.enable=true

# 自动创建topic
auto.create.topic.enable=true


############################# Socket 服务配端网络配置 #############################

# 使用的协议，以及主机名以及端口的格式如下
#     listeners = security_protocol://host_name:port
# 参考示例:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092

# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# 接受请求的线程数
num.network.threads=3

# 执行请求的线程数
num.io.threads=8

# TCP连接的SO_SNDBUF缓冲区大小，默认102400，单位字节
socket.send.buffer.bytes=102400

# TCP连接的SO_RCVBUF缓冲区大小，默认102400，单位字节
socket.receive.buffer.bytes=102400

# 请求的最大长度
socket.request.max.bytes=104857600


############################# Log相关配置 #############################

## 存放log的目录，多个用逗号隔开
log.dirs=/opt/tmp/kafka-logs

# 每个topic默认的partition数
num.partitions=1

# 用来恢复log文件以及关闭时将log数据刷新到磁盘的线程数，每个目录对应的线程数
num.recovery.threads.per.data.dir=1


############################# Log 刷盘的配置 #############################
# 每隔多少个消息触发一次刷盘操作
#log.flush.interval.messages=10000

# 每隔多少毫米触发一次刷盘操作
#log.flush.interval.ms=1000


############################# 下面是：两种日志保存策略 #############################

# 注意：下面有两种配置，一种是基于时间的策略，另一种是基于日志文件大小的策略
# 两种策略都配置的话，只要满足其中一种，则出发log删除操作。
# 删除先删除最旧的日志

# 消息在kafka中保留的时间。168小时（7天）之前的log，可以被删除
log.retention.hours=168

# 当剩余空间低于log.retention.bytes字节，则开始删除
#log.retention.bytes=1073741824

# 最大的segment 文件上限，超过就创建新的文件
log.segment.bytes=1073741824

# 每隔300000ms,logcleaner线程将检查一次，看是否符合上述保留策略的消息可以被删除
log.retention.check.interval.ms=300000



############################# Zookeeper #############################
# zk 集群地址，多个用逗号隔开
zookeeper.connect=localhost:2181

# zk 连接的超时时间
zookeeper.connection.timeout.ms=6000


